AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DynamoDBTableName:
    Type: String
    Default: 'TDDynamoDBTable'
    Description: 'Name of the DynamoDB table'
  
  S3BucketName:
    Type: String
    Default: 'tds3project-bucket'
    Description: 'Name of the existing S3 bucket'
  
  GlueJobName:
    Type: String
    Default: 'TDS3ProjectGlueJob'
    Description: 'Name of the Glue job'
  
  LambdaDynamoDBFunctionName:
    Type: String
    Default: 'TDS3ProjectDynamoDBFunction'
    Description: 'Name of the DynamoDB Lambda function'
  
  LambdaS3FunctionName:
    Type: String
    Default: 'TDS3ProjectS3Function'
    Description: 'Name of the S3 Lambda function'
  
  LambdaGlueJobFunctionName:
    Type: String
    Default: 'TDS3ProjectGlueJobFunction'
    Description: 'Name of the Glue job Lambda function'
  
  ApiGatewayName:
    Type: String
    Default: 'TDS3ProjectApiGateway'
    Description: 'Name of the API Gateway'

Resources:
  TDDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: 'Id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'Id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TDS3ProjectGlueJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Name: !Ref GlueJobName
      Role: !GetAtt TDS3ProjectGlueRole.Arn
      Command:
        Name: 'glueetl'
        ScriptLocation: !Sub 's3://${S3BucketName}/my-glue-job-script.py'
        PythonVersion: '3'
      DefaultArguments:
        '--job-bookmark-option': 'job-bookmark-enable'
      ExecutionProperty:
        MaxConcurrentRuns: 2
      MaxRetries: 0

  TDS3ProjectGlueRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'glue.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'tds3project-glue-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/my-glue-job-script.py'

  TDS3ProjectLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'tds3project-lambda-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DescribeTable'
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                  - 's3:CreateBucket'
                  - 'glue:StartJobRun'
                  - 'glue:StopJobRun'
                Resource: '*'

  TDS3ProjectDynamoDBFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaDynamoDBFunctionName
      Runtime: 'python3.12'
      Role: !GetAtt TDS3ProjectLambdaRole.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'dynamodb-zip'

  TDS3ProjectS3Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaS3FunctionName
      Runtime: 'python3.12'
      Role: !GetAtt TDS3ProjectLambdaRole.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 's3-zip'

  TDS3ProjectGlueJobFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaGlueJobFunctionName
      Runtime: 'python3.12'
      Role: !GetAtt TDS3ProjectLambdaRole.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'glue-zip'

  TDS3ProjectApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref ApiGatewayName

  TDS3ProjectDynamoDBAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt TDS3ProjectApiGateway.RootResourceId
      PathPart: 'TDS3ProjectDynamoDBResources'
      RestApiId: !Ref TDS3ProjectApiGateway

  TDS3ProjectGlueJobAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt TDS3ProjectApiGateway.RootResourceId
      PathPart: 'TDS3ProjectGlueResources'
      RestApiId: !Ref TDS3ProjectApiGateway

  TDS3ProjectS3APIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt TDS3ProjectApiGateway.RootResourceId
      PathPart: 'TDS3ProjectS3Resources'
      RestApiId: !Ref TDS3ProjectApiGateway

  TDS3ProjectDynamoDBMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref TDS3ProjectDynamoDBAPIResource
      RestApiId: !Ref TDS3ProjectApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${TDS3ProjectDynamoDBFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'

  TDS3ProjectGlueJobMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref TDS3ProjectGlueJobAPIResource
      RestApiId: !Ref TDS3ProjectApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${TDS3ProjectGlueJobFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'

  TDS3ProjectS3Method:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref TDS3ProjectS3APIResource
      RestApiId: !Ref TDS3ProjectApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${TDS3ProjectS3Function.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'

  TDS3ProjectApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref TDS3ProjectApiGateway
      StageName: 'prod'
    DependsOn: [TDS3ProjectDynamoDBMethod, TDS3ProjectGlueJobMethod, TDS3ProjectS3Method]
