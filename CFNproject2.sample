AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'MyTable'
      AttributeDefinitions:
        - AttributeName: 'Id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'Id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-s3-bucket'

  MyGlueJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Name: 'MyGlueJob'
      Role: !GetAtt GlueServiceRole.Arn
      Command:
        Name: 'glueetl'
        ScriptLocation: 's3://my-s3-bucket/scripts/glue_script.py'
        PythonVersion: '3'
      DefaultArguments:
        '--TempDir': 's3://my-s3-bucket/temp/'
        '--job-bookmark-option': 'job-bookmark-enable'
      MaxRetries: 1

  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'glue.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'GluePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: 'arn:aws:s3:::my-s3-bucket/*'

  LambdaExecutionRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaPolicy1'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DescribeTable'
                Resource: 'arn:aws:dynamodb:REGION:ACCOUNT_ID:table/MyTable'

  LambdaExecutionRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaPolicy2'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: 'arn:aws:s3:::my-s3-bucket/*'

  LambdaExecutionRole3:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaPolicy3'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'glue:StartJobRun'
                  - 'glue:StopJobRun'
                Resource: 'arn:aws:glue:REGION:ACCOUNT_ID:job/MyGlueJob'

  MyLambdaFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyFunction1'
      Runtime: 'python3.8'
      Role: !GetAtt LambdaExecutionRole1.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: 'my-s3-bucket'
        S3Key: 'function1.zip'

  MyLambdaFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyFunction2'
      Runtime: 'python3.8'
      Role: !GetAtt LambdaExecutionRole2.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: 'my-s3-bucket'
        S3Key: 'function2.zip'

  MyLambdaFunction3:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyFunction3'
      Runtime: 'python3.8'
      Role: !GetAtt LambdaExecutionRole3.Arn
      Handler: 'lambda_function.lambda_handler'
      Code:
        S3Bucket: 'my-s3-bucket'
        S3Key: 'function3.zip'

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MyAPI'

  MyApiResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: 'resource1'
      RestApiId: !Ref MyApiGateway

  MyApiResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: 'resource2'
      RestApiId: !Ref MyApiGateway

  MyApiResource3:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: 'resource3'
      RestApiId: !Ref MyApiGateway

  MyApiMethod1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref MyApiResource1
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction1.Arn}/invocations'

  MyApiMethod2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref MyApiResource2
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction2.Arn}/invocations'

  MyApiMethod3:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref MyApiResource3
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction3.Arn}/invocations'

  MyApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: 'prod'
    DependsOn: [MyApiMethod1, MyApiMethod2, MyApiMethod3]
